HW 1 - due before midnight tonight

HW 2 will be posted later today

///////////////////////////

Today:

- logic gates
- truth tables
- parse trees
- begin propositional logic

///////////////////////////

Basic logic gates (draw on board)

gates still used to design circuits

why do we care about equivalent circuits
    (especially if one uses fewer gates)?



what about programming?




//////////////////////////////////////////

Design circuits for:

NOT (p OR q)       (p NOR q)



NOT (p AND (q OR r))



p XOR q (with just the gates we've seen, not a specific XOR gate)



--> how to add an image to GitHub repo?

/////////////////////////////////////

How would we evaluate the output of these circuits with
different inputs?




Graphically build circuits:

https://logic.ly/demo/


//////////////////////////////////////

Truth tables.

- boolean variables (each can be true or false)
- connect with logical operators

Basic operations:

∧ - AND (can use a caret ^ )
∨ - OR (inclusive or) (can use a capital V)
¬ - NOT (can use ! or ~ instead)
→ - IMPLIES (can use ->)


Reminder: implies operator

p -> q

this is false when I have broken a promise

////////////////////////////////////////

Compound truth tables.


Consider ¬p ∧ q ∨ r.

--> what operation do we do first?



Order of operations

In math? 3 - 2 + 4 - 2 * 8

(), exponents, */, +-


For logic statements:

From highest (happens first) to lowest (happens last) precedence:
    (), ¬, ∧, ∨, →




Given this statement:

    ¬p ∧ q ∨ r

Add () to show the order of operations.

(((¬p) ∧ q) ∨ r)


Evaluate the above statement using these
variable assignments:

p is T
q is F
r is F

(((¬p) ∧ q) ∨ r) evaluates to false


////////////////////////////////////////////////

Order of operations
    ¬ evaluates right to left
        ¬¬p is equivalent to.... (¬(¬p))

    ∧ and ∨ evaluate left to right
        p ∧ q ∧ r is equivalent to.... ((p ∧ q) ∧ r)
        p ∨ q ∨ r is equivalent to.... ((p ∨ q) ∨ r)

    → evaluates right to left
        p → q → r is equivalent to.... (p → (q → r))





//////////////////////////////////////////

Top-level operator (what happens LAST?)


¬p ∧ q ∨ r


top-level: OR (I do it last)

How is this similar to a circuit?

the one all the way to the right (do it last)

///////////////////////////////

p ∧ q ∨ r ∧ p

rewrite with ():

top-level operator?

(p ∧ q) ∨ (r ∧ p)

top-level: OR

//////////////////////////////

p ∧ q ∧ r ∧ s

rewrite with ():

((p ∧ q) ∧ r) ∧ s


top-level operator? rightmost AND

////////////////////////////////////////////////////

Classifying truth tables.

Contingent, contradictory, tautology


Definitions/examples

contingent - the overall statements is true for
    some truth assignments and false for others

    p

    p = T
    p = F

contradictory - for all possible truth assignments,
    the overall statement is false

    p ^ !p

    p = T
    p = F

tautology - for all possible truth assignments,
    the overall statement is true

    p V !p

    p = T
    p = F


////////////////////////////////////////

Write a truth table for:

p ∨ q → p

            *
p q | p ∨ q → p
------------------
T T |   T   T
T F |   T   T
F T |   T   F
F F |   F   T

Contingent

--> need to evaluate statement on ALL possible truth assignments

--> how many truth assignments are there?

--> how would we classify this truth table?


/////////////////////////////////////////

complete truth table in truth.logika

/////////////////////////////////////////

parse trees

--> what are they?

--> draw one for (p ∧ q) → ¬r


--> how do they relate to programming?

--> what is the "top-level operator" here?




////////////////////////////////////////

Propositional logic.


- a set of propositional atoms (statements that can be T/F)
    --> these will be our boolean variables in logic statements



- connected by logical operators



- join together to make new propositions (logical sentences)
    that can be true or false



////////////////////////////////////////

Which ones are propositions?

Today is Thursday. yes


What time is it? no


x == 2 yes


Pigs can fly. yes


Drive carefully. no


y <= 4 yes



////////////////////////////////////////

Suppose we have these propositional atoms:

    p: It is below freezing.

    q: It is snowing.

    r: y <= 4

    s: x == 2


How would we express these as English sentences?

    ¬p: It is not below freezing


    p ∧ q: It is below freezing and it is snowing


    p → q : If it is below freezing then it is snowing


    ¬p → ¬q: If it is not below freezing then it is not snowing


    r ∨ s: if (y <= 4 || x == 2)

    ¬r: if (y > 4)

////////////////////////

Next time:

- A bit more with translations
- Equivalent propositions
- DeMorgan's laws
- Equivalent if-statements
- Negating if-statements
- Proving equivalence with truth tables
- Satisfiability