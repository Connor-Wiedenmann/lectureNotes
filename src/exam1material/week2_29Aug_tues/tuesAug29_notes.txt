HW 1 - due before midnight tonight

HW 2 will be posted later today

///////////////////////////

Today:

- logic gates
- truth tables
- parse trees
- begin propositional logic

///////////////////////////

Basic logic gates (draw on board)

gates still used to design circuits

why do we care about equivalent circuits
    (especially if one uses fewer gates)?



what about programming?




//////////////////////////////////////////

Design circuits for:

NOT (p OR q)       (p NOR q)



NOT (p AND (q OR r))



p XOR q (with just the gates we've seen, not a specific XOR gate)



--> how to add an image to GitHub repo?

/////////////////////////////////////

How would we evaluate the output of these circuits with
different inputs?




Graphically build circuits:

https://logic.ly/demo/


//////////////////////////////////////

Truth tables.

- boolean variables (each can be true or false)
- connect with logical operators

Basic operations:

∧ - AND (can use a caret ^ )
∨ - OR (inclusive or) (can use a capital V)
¬ - NOT (can use ! or ~ instead)
→ - IMPLIES (can use ->)


Reminder: implies operator

////////////////////////////////////////

Compound truth tables.


Consider ¬p ∧ q ∨ r.

--> what operation do we do first?



Order of operations

In math? 3 - 2 + 4 - 2 * 8




For logic statements:

From highest (happens first) to lowest (happens last) precedence:
    (), ¬, ∧, ∨, →




Given this statement:

    ¬p ∧ q ∨ r


Add () to show the order of operations.



Evaluate the above statement using these
variable assignments:

p is T
q is F
r is F




////////////////////////////////////////////////

Order of operations
    ¬ evaluates right to left
        ¬¬p is equivalent to....

    ∧ and ∨ evaluate left to right
        p ∧ q ∧ r is equivalent to....
        p ∨ q ∨ r is equivalent to....

    → evaluates right to left
        p → q → r is equivalent to....





//////////////////////////////////////////

Top-level operator (what happens LAST?)


¬p ∧ q ∨ r



How is this similar to a circuit?


///////////////////////////////

p ∧ q ∨ r ∧ p

rewrite with ():

top-level operator?


//////////////////////////////

p ∧ q ∧ r ∧ s

rewrite with ():

top-level operator?

////////////////////////////////////////////////////

Classifying truth tables.

Contingent, contradictory, tautology


Definitions/examples


////////////////////////////////////////

Write a truth table for:

(p ∧ q) → p


p q | (p ∧ q) → p
------------------



--> need to evaluate statement on ALL possible truth assignments

--> how many truth assignments are there?

--> how would we classify this truth table?


/////////////////////////////////////////

complete truth table in truth.logika

/////////////////////////////////////////

parse trees

--> what are they?

--> draw one for (p ∧ q) → ¬r


--> how do they relate to programming?

////////////////////////////////////////

Propositional logic.


- a set of propositional atoms (statements that can be T/F)
    --> these will be our boolean variables in logic statements



- connected by logical operators



- join together to make new propositions (logical sentences)
    that can be true or false



////////////////////////////////////////

Which ones are propositions?

Today is Thursday.


What time is it?


x == 2


Pigs can fly.


Drive carefully.


y <= 4



////////////////////////////////////////

Suppose we have these propositional atoms:

    p: It is below freezing.

    q: It is snowing.

    r: y <= 4

    s: x == 2


How would we express these as English sentences?

    ¬p:


    p ∧ q:


    p → q :


    ¬p → ¬q:


    r ∨ s:

    ¬r: 

////////////////////////

Next time:

- A bit more with translations
- Equivalent propositions
- DeMorgan's laws
- Equivalent if-statements
- Negating if-statements
- Proving equivalence with truth tables
- Satisfiability