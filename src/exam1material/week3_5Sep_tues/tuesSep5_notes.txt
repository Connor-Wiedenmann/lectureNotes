HW 2 due tonight

--> make sure to add images to your git repository!

HW 3 will be posted later today

Exam 1 is Thursday, September 14

//////////////////////////////////////////

Today:
- Review: proving statements are not equivalent; satisfiability
- Proof arguments with truth tables
- Counterexamples to arguments
- Natural deduction rules

/////////////////////////////////////////

Consider:

¬(p ∨ q)

and

¬p ∨ ¬q


How would we show they are NOT equivalent?






////////////////////////////////////////

Reminder: satisfiability

Definition?




Example: (p → ¬q) → r

Is it satisfiable?






////////////////////////////////////////

Proving an argument.

*Premises* - pieces of information we are given (assume true)

*Conclusion* - something we are trying to show logically follows
    from our premises.


///

Proofs with truth tables.

Suppose we know:

    I am in the CS department or I am in the ECE department

    I am not in the ECE department.

    If I am in the CS department,
        then I can log in to the CS lab computers.


I want to prove:

    I can log in to the CS lab computers
        and I am in the CS department.



--> How would we translate to propositional logic?






--> How might we prove this with truth tables?
    (truthTableProof1.logika)


////////////////////////////
(for easy copying)

∧ ∨ ¬ →

////////////////////////////

Another example (truthTableProof2.logika)

Premises:
    p → ¬q
    p → q
    p ∨ q

We wish to prove:

    q





/////////////////////////////

Showing arguments are invalid.

Example:

Premises:

    If it is sunny, then I wear sunscreen.

    I wear sunscreen.


Proposed conclusion:

    It is sunny.


1) Translate to propositional logic




2) Find a counter example




////////////////////////////

Downside of proofs with truth tables?











////////////////////////////

New idea: demonstrate conclusion follows from premises using
*natural deduction*

--> use a minimal set of deduction rules

--> for each logical operator
    - *introduction* rule:
        lets us introduce a claim with that operator

    - *elimination* rule:
        lets us extract pieces from a claim with that operator

--> apply these rules to create new claims that logically follow



/////////////////////////////////

Want to prove a *sequent* of the form:

    premises ⊢ conclusion

where *premises* is a comma-separated list.





Same idea as truth tables -- want to prove that anytime the premises
are all true, then the conclusion is also true.

--> but we will show the conclusion logically follows using
a series of natural deduction rules instead of truth tables.


////////////////////////////

AND rules idea.

1) What if we wanted to INTRODUCE an AND operator, like:
      P ∧ Q


   --> in what situations do you think we could do that?






2) What if we already had an AND statement like  P ∧ Q.

    --> what new claims would make sense using that statement?




    --> what happened to the AND operator in both cases?



//////////////////////////

AND rule summaries.


AND introduction:

        P   Q
∧i :  ---------
        P ∧ Q



--> How could we demonstrate this rule in a truth table?




///

AND elimination:

        P ∧ Q              P ∧ Q
 ∧e1 : ---------    ∧e2 : ---------
          P                  Q



--> How could we demonstrate these rules in a truth table?



//////////////////////////////////

What if we knew:

    a ∨ ¬b

and also:

    c → d

What could we claim with  ∧i?





//////////////////////////////////

Natural deduction proof syntax.


    premises ⊢ conclusion
    {
        1. claim                justification
        2. claim                justification
        ...
        n. conclusion           justification
    }



claim: a propositional logic statement
justificaton: the rule justifying the corresponding claim
    (along with line numbers as needed to reference previous claims)



/////////////////////////////////

Justifications so far:

    premise

    ∧i lhsNum rhsNum

    ∧e1 andNum

    ∧e2 andNum


////////////////////////////////

Example:

Given premises:  a ∧ b, c
Use natural deduction to prove: b ∧ c




/////////////////////////////////

Using Logika to check our work (and1.logika)

/////////////////////////////////

Prove the following sequent (and2.logika)

p, q, r ⊢ r ∧ (q ∧ p)



////////////////////////////////

Prove the following sequent (and3.logika)

p ∧ q ∧ r ⊢ q


////////////////////////////////

Example:

if (level >= 9 && age >= 14) {
    if (age <= 18 && level <= 12) {
        //WE ARE HERE
    }
}

--> What premises do we know at that point?

Translate to propositional logic.






--> How could we write an equivalent if-statement?

Translate to propositional logic



--> Use natural deduction to prove that our new conditional
    statement is true whenever the old one is






--> Have we proved the two conditional statements are equivalent?

///////////////////////////////

Next time:

- OR rules in natural deduction
- Using natural deduction to prove two statements are equivalent
- Equivalent if-statements
- If time, implies rules in natural deduction
