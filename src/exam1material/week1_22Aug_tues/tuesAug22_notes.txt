CIS 301. Logical Foundations of Programming.

Julie Thornton.

What is this class?
- thinking more formally
- reasoning about code
    - analyzing what we know
    - identifying equivalent programs
    - simplifying programs
- how to make claims in a more formal way
- proofs (why?)
- basics of proving correctness of programs (why?)


Syllabus

Canvas setup

Discord


/////////////////////////

HW 0 - due Thurs Aug 24
    --> see how to do it

HW 1 - due Tues Aug 29
    --> what is involved

/////////////////////////

How to succeed

/////////////////////////

Where are we going?

public int min(int[] nums)
{
    //How would we write this
    //to return the min element in nums?

    int curSmall = nums[0]; //come back
    for (int i = 1; i < nums.length; i++) {
        if (nums[i] < curSmall) {
            curSmall = nums[i];
        }
    }

    return curSmall;
}

//elsewhere
int[] test = {7,-5,0,-5,3,2};
int result = min(test);


--> what value should result have? -5




--> what could min *promise* to return that would guarantee our
    answer?

parameter: nums (int[])

min promises to...
return a number that is less than or equal to every element in nums
    and that number is also an element in nums

    and in the case of duplicates, returns the first such instance

--> what do we call this "promise?" postcondition







--> in what situations would min not work?

when the parameter array has no elements


--> what do we need to require about min? What is this called?

preconditions

requires nums is not null and nums.length > 0


/////////////////////////

Taking a step back...what is logic?

- analysis of an argument according to a set of rules
- given a set of premises (and sometimes a conclusion)


- we determine a valid conclusion when we assume
all the premises are true


Note that the premises might make no sense!

//////////////////////////////////////////////////////////

Premise 1: If a person wears a red shirt, then they don’t
    like pizza.
Premise 2: Fred is wearing a red shirt.

Conclusion: Fred doesn’t like pizza.

--> Is this a valid argument? yes




//////////////////////////////////////////////////////////

Logical Arguments with ”OR”

- can be ambiguous! Why?

I order fries or I order chips.



"or" can be inclusive or exclusive


- in English, how do we interpret "or"?

usually, exclusive (but it can be ambiguous)


- in programming? inclusive




"Or" in THIS class: inclusive



Premise 1: I'll fold the laundry or I'll do the dishes.
Premise 2: I don't fold the laundry.

--> What can I conclude?

I'm going to do the dishes



/////////////////////////////////////////////////////////

num = 5;
if (num < 4 || x >= 10) {
    statement;
}



Suppose we know "statement" is executed
--> What can we conclude?

x >= 10

Since "statement" executed, we know the if-statement must have
been true. This means the condition, num < 4 || x >= 10, was true.

Since num was 5 before the loop, we know num is NOT < 4. Thus
the other side of the OR must have been true -- x >= 10.

/////////////////////////////////////////////////////////

x = 9;
if (num < 4 || x >= 10) {
    if (num > 2) {
        statement;
    }
}



Suppose we know "statement" is executed
--> What can we conclude? num is 3

Since the statement executed, we know the condition in both if-
statements must have been true. This means that num > 2 and that
num < 4 || x >= 10. Since x was initially 9, then x is NOT >= 10.
In order for that condition to be true, we have that num < 4.
Putting that together with the other condition, num > 2, we
can conclude that num is 3.

(This assumes that num is an integer.)


/////////////////////////////////////////////////////////

What rule are we seeing with an ”or” statement,
where we know that one of the statements is NOT true?


other part is true


////////////////////////////////////////////////////////

Logical Arguments with ”IF/THEN” (aka "implies" -> )

If it is raining, then I will get wet.
It is raining.

--> What can I conclude?



I will get wet

/////////////////////////////////////////////////////////

When we have an ”if/then” statement,
and we know that the ”if” part is true?

    ...what can we always conclude?


the then part is true



////////////////////////////////////////////////////////

If I don’t hear my alarm, then I will be late for class.
I am late for class.

--> What can I conclude?


nothing! I might have been late for a number of reasons.



///////////////////////////////////////////////////////

If I don’t hear my alarm, then I will be late for class.
I hear my alarm.

--> What can I conclude?

again, nothing. I might still be late even if I hear my alarm
(go back to sleep, car wreck, etc.)




///////////////////////////////////////////////////////

If I don’t hear my alarm, then I will be late for class.

--> Can you think of another way to phrase this promise?



--> What do we know if we AREN'T late?

If I'm not late for class, then ...I must have heard the alarm.


/////////////////////////////////////////////////////

if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is 17 here. What do we know?

we can't conclude anything. y might have been 17 before the
if-statement.



////////////////////////////////////////////////////

y = 10;

if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is 17 here. Can we conclude anything now?

Here, since y was 10 before the if-statement and 17 afterwards,
we can conclude that y must have been set to 17 inside the if-statement.

Thus its condition must have been true: num < 4 || x >= 10


/////////////////////////////////////////////////////

if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is NOT 17 here. What do we know?

We can conclude that the if-statement condition was false, because
otherwise y WOULD be 17. This means that:

num >= 4 and x < 10

/////////////////////////////////////////////////////

Homework 0: due Thursday, August 24
    - get Sireum/IntelliJ + GitHub ready (do this now!)
    - post something in Discord
    - come to office hours or post in Discord if
        you need software setup help!

Homework 1: due Tuesday, August 29
    - first page of homework is logical reasoning
        (what we did today)
    - second page is logic puzzles (what we'll do on Thursday)

Next: logic puzzles!